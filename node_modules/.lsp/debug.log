Hello - from /home/adith/.vscode/extensions/jaredly.reason-vscode-1.7.13/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","languageId":"ocaml","version":1,"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":238,"character":4},"end":{"line":238,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 2, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":238,"character":4},"end":{"line":238,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 4, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 5, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":6,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 6, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 7, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":8,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 8, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":238,"character":4},"end":{"line":238,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 9, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":10,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 10, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":11,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 11, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":12,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 12, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":13,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 13, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":14,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":238,"character":4},"end":{"line":238,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 14, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":15,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 15, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":16,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 16, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":17,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 17, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":18,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Sending response {"id": 18, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":232,"character":75}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 19, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":20,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":238,"character":4},"end":{"line":238,"character":4}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 20, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":21,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 21, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":22,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 22, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":23,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":224,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 23, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":23}}
Read message 
{"jsonrpc":"2.0","id":24,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":234,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 24, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":25,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":28,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.00977516174316ms
Sending response {"id": 25, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":26,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":33,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0169277191162ms
Sending response {"id": 26, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":27,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":239,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 27, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":28,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":28,"character":16}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 28, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":29,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":44,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 29, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":30,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 30, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":31,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 31, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":32,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":28,"character":17},"end":{"line":28,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0100135803223ms
Sending response {"id": 32, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":33,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 33, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":34,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 34, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":35,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":48,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0381469726562ms
Sending response {"id": 35, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":36,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":51,"character":24}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 36, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":37,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":37,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 37, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":38,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":22,"character":2}}}
[server] Got a method textDocument/hover
[server] processing took 0.0181198120117ms
Sending response {"id": 38, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":39,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":22,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 39, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":40,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":24,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0112056732178ms
Sending response {"id": 40, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":41,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 41, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":42,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 42, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":43,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":28,"character":17},"end":{"line":28,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 43, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":44,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0159740447998ms
Sending response {"id": 44, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":45,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0200271606445ms
Sending response {"id": 45, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":46,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":23,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 46, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":47,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":38,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 47, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":48,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":10,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 48, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":49,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 49, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":50,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 50, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":51,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":28,"character":17},"end":{"line":28,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 51, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":52,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 52, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":53,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 53, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":54,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":37,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 54, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":55,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":11,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 55, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":56,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":38,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 56, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":57,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 57, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":58,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 58, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":59,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":28,"character":17},"end":{"line":28,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 59, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":60,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 60, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":61,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 61, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":62,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":22,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.00381469726562ms
Sending response {"id": 62, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":63,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":21,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00286102294922ms
Sending response {"id": 63, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":64,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":58,"character":32}}}
[server] Got a method textDocument/hover
[server] processing took 0.0219345092773ms
Sending response {"id": 64, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":65,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 65, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":66,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 66, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":67,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":28,"character":17},"end":{"line":28,"character":17}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 67, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":68,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 68, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":69,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 69, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":70,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":14,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 70, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":71,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":37,"character":17}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 71, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":72,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":232,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 72, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":73,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":228,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0209808349609ms
Sending response {"id": 73, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":74,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 74, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":75,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 75, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":76,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":139,"character":13},"end":{"line":139,"character":13}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00476837158203ms
Sending response {"id": 76, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":77,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":102,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 77, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":78,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":202,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 78, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":79,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":187,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.00190734863281ms
Sending response {"id": 79, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":80,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":161,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 80, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":81,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":145,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0269412994385ms
Sending response {"id": 81, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":82,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":112,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 82, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":83,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":113,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 83, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":84,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":83,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.0269412994385ms
Sending response {"id": 84, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":85,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":78,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0178813934326ms
Sending response {"id": 85, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":86,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":70,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 86, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":87,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":88,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 87, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":88,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 88, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":89,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 89, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":90,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":88,"character":21},"end":{"line":88,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 90, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":91,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":90,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 91, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":92,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":88,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 92, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":93,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":38,"character":18},"end":{"line":38,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00977516174316ms
Sending response {"id": 93, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":94,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":70,"character":4}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 94, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":95,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":155,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 95, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":96,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":130,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 96, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":97,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":112,"character":15}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 97, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":98,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":130,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 98, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":99,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":145,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.00882148742676ms
Sending response {"id": 99, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":100,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":140,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.00381469726562ms
Sending response {"id": 100, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":101,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":106,"character":9}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 101, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":102,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":113,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 102, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":103,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":102,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 103, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":104,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":112,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 104, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":105,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":155,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 105, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":106,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":101,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 106, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":107,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 107, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":108,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 108, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":109,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":38,"character":18},"end":{"line":38,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00619888305664ms
Sending response {"id": 109, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":110,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 110, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":111,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 111, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":112,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 112, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":113,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 113, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":114,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":38,"character":18},"end":{"line":38,"character":18}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 114, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":115,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 115, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":116,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 116, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":117,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":96,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 117, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":118,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 118, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":119,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 119, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","id":120,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":141,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 120, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":121,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":143,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 121, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":122,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 122, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":123,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 123, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":124,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":146,"character":22},"end":{"line":146,"character":22}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 124, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":2},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  \n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":125,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 125, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":126,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 126, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":127,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 127, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":3},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  |\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":128,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.028133392334ms
Sending response {"id": 128, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":129,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":3},"end":{"line":147,"character":3}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0169277191162ms
Sending response {"id": 129, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":130,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 130, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":4},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | \n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":131,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00476837158203ms
Sending response {"id": 131, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":132,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 132, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":133,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0100135803223ms
Sending response {"id": 133, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":5},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | S\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":134,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":147,"character":5},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 134, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":9},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | Speci\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":135,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 135, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":136,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":9},"end":{"line":147,"character":9}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0119209289551ms
Sending response {"id": 136, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":137,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 137, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":138,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 138, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":10},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialChar\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":139,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 139, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":140,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":15},"end":{"line":147,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 140, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":141,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 141, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":142,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.0128746032715ms
Sending response {"id": 142, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":143,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":15},"end":{"line":147,"character":15}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 143, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":11},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharT\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":144,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":147,"character":16},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 144, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":13},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharTyp\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":145,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":147,"character":18},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 145, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":16},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharType o\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":146,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":147,"character":21},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 146, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":18},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharType of \n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":147,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 147, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":148,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 148, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":149,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00905990600586ms
Sending response {"id": 149, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":19},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharType of s\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":150,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":147,"character":24},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 150, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":20},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharType of sp\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":151,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 151, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":152,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":25},"end":{"line":147,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 152, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":153,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 153, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":21},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharType of spe\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":154,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":147,"character":26},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00381469726562ms
Sending response {"id": 154, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":22},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharType of spec\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":155,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 155, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":156,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":27},"end":{"line":147,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 156, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":157,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 157, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":158,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Sending response {"id": 158, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":159,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":27},"end":{"line":147,"character":27}},"context":{"diagnostics":[{"range":{"start":{"line":147,"character":23},"end":{"line":147,"character":27}},"message":"Unbound type constructor spec","severity":1,"code":"","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 159, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":23},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharType of specialchar\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":160,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 160, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":161,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":34},"end":{"line":147,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 161, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":162,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 162, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":163,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00882148742676ms
Sending response {"id": 163, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":164,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":34},"end":{"line":147,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 164, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":165,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":153,"character":23}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 165, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","languageId":"ocaml","version":1,"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":166,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 166, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":167,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 167, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":168,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 168, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":169,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 169, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":170,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":1,"character":11},"end":{"line":1,"character":11}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 170, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":171,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":386,"character":48}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 171, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":172,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":381,"character":56}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 172, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":173,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 173, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":174,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 174, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":175,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":34},"end":{"line":147,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 175, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":176,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 176, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":177,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 177, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":23},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharType of specialchar\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":23}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":178,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":377,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 178, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":179,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":370,"character":47}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 179, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":180,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":377,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 180, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":181,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":370,"character":43}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 181, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":182,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":18,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 182, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":183,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":120,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00286102294922ms
Sending response {"id": 183, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":184,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":130,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 184, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":185,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 185, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":186,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 186, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":187,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":126,"character":63},"end":{"line":126,"character":63}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 187, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":2},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        \n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":188,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 188, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":189,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 189, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":190,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 190, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":3},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        |\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":191,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 191, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":192,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":9},"end":{"line":127,"character":9}},"context":{"diagnostics":[{"range":{"start":{"line":125,"character":8},"end":{"line":134,"character":115}},"message":"Warning 8: this pattern-matching is not exhaustive.\nHere is an example of a case that is not matched:\nSpecialCharType _","severity":2,"code":"8","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 192, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":193,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00882148742676ms
Sending response {"id": 193, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":4},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | \n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":194,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00214576721191ms
Sending response {"id": 194, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":195,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 195, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":5},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | S\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":196,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":127,"character":11},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00214576721191ms
Sending response {"id": 196, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":8},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SPec\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":197,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 197, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":198,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":14},"end":{"line":127,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":125,"character":8},"end":{"line":134,"character":115}},"message":"Warning 8: this pattern-matching is not exhaustive.\nHere is an example of a case that is not matched:\nSpecialCharType _","severity":2,"code":"8","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 198, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":199,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 199, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":200,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 200, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":201,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":14},"end":{"line":127,"character":14}},"context":{"diagnostics":[{"range":{"start":{"line":127,"character":10},"end":{"line":127,"character":14}},"message":"This variant pattern is expected to have type Ast.var_type\nThe constructor SPec does not belong to type Ast.var_type","severity":1,"code":"","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0250339508057ms
Sending response {"id": 201, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":9},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":202,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 202, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":203,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":25},"end":{"line":127,"character":25}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 203, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":204,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00190734863281ms
Sending response {"id": 204, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":205,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 205, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":10},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType \n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":206,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 206, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":207,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0119209289551ms
Sending response {"id": 207, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":208,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 208, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":11},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType ()\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":209,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":127,"character":27}}}
[server] Got a method textDocument/signatureHelp
[server] processing took 0.00286102294922ms
Sending response {"id": 209, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":210,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 210, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":211,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 211, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":212,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":27},"end":{"line":127,"character":27}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 212, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":13},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc)\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":213,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 213, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":214,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":29},"end":{"line":127,"character":29}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 214, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":215,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 215, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":14},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc)\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":16},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":216,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 216, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":217,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":32},"end":{"line":127,"character":32}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 217, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":218,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 218, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":219,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 219, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":17},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) ->\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":220,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 220, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":221,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":33},"end":{"line":127,"character":33}},"context":{"diagnostics":[{"range":{"start":{"line":96,"character":53},"end":{"line":139,"character":25}},"message":"This expression has type 'a * 'b but an expression was expected of type\n  string list","severity":1,"code":"","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 221, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":222,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 222, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":18},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> \n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":223,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00476837158203ms
Sending response {"id": 223, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":224,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 224, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":225,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 225, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":19},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> S\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":226,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":127,"character":35},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00190734863281ms
Sending response {"id": 226, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":227,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00619888305664ms
Sending response {"id": 227, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":228,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":35},"end":{"line":127,"character":35}},"context":{"diagnostics":[{"range":{"start":{"line":96,"character":53},"end":{"line":139,"character":25}},"message":"This expression has type 'a * 'b but an expression was expected of type\n  string list","severity":1,"code":"","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 228, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":229,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 229, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":230,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 230, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":25},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> String \n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":231,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0109672546387ms
Sending response {"id": 231, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":232,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 232, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":233,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 233, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":26},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> String\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":234,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 234, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":235,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":40},"end":{"line":127,"character":40}},"context":{"diagnostics":[{"range":{"start":{"line":127,"character":34},"end":{"line":127,"character":40}},"message":"Unbound constructor String","severity":1,"code":"","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 235, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":236,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 236, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":237,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 237, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":238,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":40},"end":{"line":127,"character":40}},"context":{"diagnostics":[{"range":{"start":{"line":127,"character":34},"end":{"line":127,"character":40}},"message":"Unbound constructor String","severity":1,"code":"","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 238, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":27},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> Strin\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":32},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> \n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":239,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 239, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":240,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 240, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":241,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 241, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":33},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> e\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":242,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":127,"character":35},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00286102294922ms
Sending response {"id": 242, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":36},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> eval\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":243,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 243, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":244,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":38},"end":{"line":127,"character":38}},"context":{"diagnostics":[{"range":{"start":{"line":125,"character":8},"end":{"line":134,"character":115}},"message":"Warning 8: this pattern-matching is not exhaustive.\nHere is an example of a case that is not matched:\nTau","severity":2,"code":"8","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 244, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":245,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00190734863281ms
Sending response {"id": 245, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":37},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> eval_\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":246,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00691413879395ms
Sending response {"id": 246, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":247,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":39},"end":{"line":127,"character":39}},"context":{"diagnostics":[{"range":{"start":{"line":125,"character":8},"end":{"line":134,"character":115}},"message":"Warning 8: this pattern-matching is not exhaustive.\nHere is an example of a case that is not matched:\nTau","severity":2,"code":"8","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 247, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":248,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 248, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":249,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Sending response {"id": 249, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":39},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> eval_sp\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":250,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 250, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":251,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":41},"end":{"line":127,"character":41}},"context":{"diagnostics":[{"range":{"start":{"line":125,"character":8},"end":{"line":134,"character":115}},"message":"Warning 8: this pattern-matching is not exhaustive.\nHere is an example of a case that is not matched:\nTau","severity":2,"code":"8","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 251, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":252,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00810623168945ms
Sending response {"id": 252, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":253,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 253, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":254,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":41},"end":{"line":127,"character":41}},"context":{"diagnostics":[{"range":{"start":{"line":127,"character":34},"end":{"line":127,"character":41}},"message":"Unbound value eval_sp\nHint: Did you mean eval?","severity":1,"code":"","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 254, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":40},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> eval_special_character\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":255,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 255, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":256,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 256, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":257,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":56},"end":{"line":127,"character":56}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 257, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":258,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 258, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":41},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> eval_special_character \n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":42},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> eval_special_character s\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":259,"method":"textDocument/completion","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"position":{"line":127,"character":58},"context":{"triggerKind":1}}}
[server] Got a method textDocument/completion
[server] processing took 0.00500679016113ms
Sending response {"id": 259, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":43},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> eval_special_character sc\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","id":260,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 260, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":261,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00786781311035ms
Sending response {"id": 261, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":262,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":59},"end":{"line":127,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 262, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":263,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Sending response {"id": 263, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":264,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":127,"character":59},"end":{"line":127,"character":59}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00786781311035ms
Sending response {"id": 264, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":265,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"},"range":{"start":{"line":130,"character":30},"end":{"line":130,"character":30}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 265, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":43},"contentChanges":[{"text":"open Ast\nopen Printf\n\nexception MetadataException of string\nexception SettingException of string\n\n(** [start_eval file ast] starts the evaluation of the AST [ast] parsed from file [file]\n    and outputs a .txt file named [file].txt with the corresponding LaTeX code. *)\nlet rec start_eval (file:string) (ast:Ast.environment) : unit =\n  let (post_settings_ast, header) = make_settings ast [] in\n  let (post_metadata_ast, header_with_title) = begin match post_settings_ast with\n                               | None -> (None, header)\n                               | Some(a) -> (make_title a header) end in\n  let base_out = header_with_title @ [\"\\\\begin{document}\"; \"\\\\maketitle\"; \"\\\\setlength{\\\\parskip}{1em}\"] in\n  let out = begin match post_metadata_ast with\n                  | None -> base_out\n                  | Some(a) -> eval a base_out end in\n  let final_out = out @ (\"\\\\end{document}\" :: []) in\n  let file_name = String.concat \"\" [(String.sub file 0 (String.index file '.')); \".txt\"] in\n  let oc = open_out file_name in\n  write oc final_out;\n  close_out oc;\n  print_endline \"done!\"\n\n(** [write oc list] writes the string list [list] to the out_channel [oc] *)\nand write (oc:out_channel) (list:string list) : unit =\n  match list with\n  | [] -> ()\n  | h :: t -> fprintf oc \"%s\\n\" h; write oc t;\n\n(** [make_title ast header] makes the title from [ast] and appends it to [header] *)\nand make_title (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_metadata m l] extracts the metadata represented by Ast.metadata [m]\n      and outputs the corresponding string list *)\n  let rec extract_metadata (m:Ast.metadata) (l:string list) : string list =\n    match m with\n    | MetadataList(m1, m2) -> (extract_metadata m1 []) @ (extract_metadata m2 [])\n    | Author(name) -> [String.concat \"\" [\"\\\\author{\"; name; \"}\"]]\n    | Date(date) -> [String.concat \"\" [\"\\\\date{\"; date; \"}\"]]\n    | Title(title) -> [String.concat \"\" [\"\\\\title{\"; title; \"}\"]] in\n\n  match ast with\n  | Metadata (m) -> (None, header @ (extract_metadata m []))\n  | ListEnv(Metadata(m), a) -> (Some(a), header @ (extract_metadata m []))\n  | _ -> (Some(ast), header @ [\"\\\\author{}\"; \"\\\\date{}\"; \"\\\\title{}\"])\n\n(** [make_settings ast header] makes the settings in [ast] and appends them to [header] *)\nand make_settings (ast:Ast.environment) (header:string list) : Ast.environment option * string list =\n  (** [extract_settings s l] extracts the settings represented by the Ast.setting [s]\n      and outputs the corresponding string list *)\n  let rec extract_settings (s:Ast.setting) (l:string list) : string list = \n    match s with\n    | FontSize(f) -> raise (SettingException \"You must either declare fontsize first or omit it\")\n    | PageStyle(s) ->\n      let style = begin match s with\n                        | Letter -> \"letterpaper\"\n                        | A4 -> \"a4paper\"\n                        | Legal -> \"legalpaper\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; style; \"}\"]]\n    | PageOrient(o) -> \n      let orient = begin match o with\n                        | Portrait -> \"portrait\"\n                        | Landscape -> \"landscape\" end in\n      [String.concat \"\" [\"\\\\geometry{\"; orient; \"}\"]]\n    | MarginSize(m) -> [String.concat \"\" [\"\\\\geometry{margin=\"; m; \"}\"]]\n    | FontStyle(s) ->\n      begin match s with\n          | Default -> [\"\"]\n          | Times -> [\"\\\\usepackage{mathptmx}\"] end\n    | Spacing(l) ->\n      begin match l with\n          | Single -> [\"\"]\n          | OnePointFive -> [\"\\\\onehalfspacing\"]\n          | Double -> [\"\\\\doublespacing\"] end\n    | ListSetting(s1, s2) -> (extract_settings s1 []) @ (extract_settings s2 []) in\n\n  (** [extract_fontsize s l] extracts the fontsize from the Ast.setting [s] and outputs the corresponding\n      string list, in order to force fontsize being the first defined setting. *)\n  let rec extract_fontsize (s:Ast.setting) (l:string list) : string list =\n    match s with\n    | FontSize(s) -> [String.concat \"\" [\"\\\\documentclass[\"; s;\"]{extarticle}\"]; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"]\n    | ListSetting(FontSize(f), s) -> (extract_fontsize (FontSize(f)) []) @ (extract_settings s [])\n    | _ -> [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"] @ (extract_settings s []) in\n\n  match ast with\n  | Settings (s) -> (None, extract_fontsize s [])\n  | ListEnv(Settings (s), a) -> (Some(a), extract_fontsize s [])\n  | _ -> (Some(ast), [\"\\\\documentclass[12pt]{article}\"; \"\\\\usepackage{geometry, mathpartir, setspace, amssymb, amsmath, bm}\"])\n\n(** [eval_text t] evaluates the Ast.text environment [t] and outputs the corresponding string list *)\nand eval_text (t:Ast.text) : string list =\n  match t with\n  | NormalText(c) -> [c]\n  | TextList(t1, t2) -> (eval_text (NormalText(t1))) @ [\"\\\\par\"] @ (eval_text t2)\n\n(** [eval_equation e out] evaluates the Ast.equation [e] and outputs the corresponding string list *)\nand eval_equation (e:Ast.equation) (out:string list) : string list =\n  \n  (** [eval_simple_equation se out] evaluates Ast.simpleequation [se] to a string list\n      appends it to [out] and returns the result of this append*)\n  let rec eval_simple_equation (se:Ast.simpleequation) (out:string list) : string list =\n  \n    (** [eval_special_character sc] evaluates [sc] to its corersponding string in LaTeX *)\n    let eval_special_character (sc:Ast.specialchar) =\n      match sc with\n      | Sigma -> \"\\\\sigma\"\n      | Lambda -> \"\\\\lambda\"\n      | BigLambda -> \"\\\\Lambda\"\n      | SigmaPrime -> \"\\\\sigma'\"\n      | SigmaDoublePrime -> \"\\\\sigma''\" in\n\n    (** [eval_delim d] evaluates Ast.delimiter [d] to a string *)\n    let eval_delim (d:Ast.delimiter) : string =\n      match d with\n      | Langle -> \"\\\\langle\"\n      | Rangle -> \"\\\\rangle\"\n      | Sum -> \"+\"\n      | Product -> \"\\\\times\"\n      | Func -> \"\\\\rightarrow\" in\n\n    (** [eval_block b] evaluates Ast.block [b] to a string *)\n    let eval_block (b:Ast.block) : string =\n\n      (** [eval_var_type vt] evaluates Ast.var_type [vt] to the corresponding string in LaTeX *)\n      let rec eval_var_type (vt:Ast.var_type) : string = \n        match vt with\n        | StrType (c) -> String.concat \"\" [\"\\\\textbf{\"; c; \"}\"]\n        | SpecialCharType (sc) -> eval_special_character sc\n        | Tau -> \"\\\\tau\"\n        | TauPrime -> \"\\\\tau'\"\n        | TauZero -> \"\\\\tau_0\"\n        | TauOne -> \"\\\\tau_1\"\n        | TauTwo -> \"\\\\tau_2\"\n        | Universal (c, vt) -> String.concat \"\" [\"\\\\forall \"; c; \".\"; (eval_var_type vt)]\n        | FuncType (vt1, d, vt2) -> String.concat \"\" [\"(\"; eval_var_type vt1; eval_delim d; eval_var_type vt2; \")\"] in\n\n      match b with\n      | SpecialChar (s) -> eval_special_character s\n      | BlockStr (c) -> c\n      | TypedBlock (c, vt) ->\n        let var_t = eval_var_type vt in\n        String.concat \"\" [c; \":\"; var_t] in\n  \n    (** [eval_lambda l] evaluates the Ast.lambda [l] to its corresponding string in LaTeX *)\n    let eval_lambda (l:Ast.lambda) : string =\n\n        let rec eval_lambda_args (la:Ast.lambda_args) =\n          match la with\n          | LambdaArgs (sc, b, lao) ->\n            let spec = eval_special_character sc in\n            let block = eval_block b in\n            let laopt = begin match lao with\n                        | Some(a) -> eval_lambda_args a\n                        | None -> \"\" end in\n            String.concat \"\" [spec; \" \"; block; \".\\\\ \"; laopt] in\n\n        match l with\n        | LambdaType (la, b) ->\n          let args = eval_lambda_args la in\n          let block = eval_block b in\n          String.concat \"\" [args; \" \"; block] in\n\n    (** [eval_stlc s] evaluates the STLC rule [s] to its corresponding string in LaTeX *)\n    let rec eval_stlc (s:Ast.stlc_rule) : string =\n\n      (** [eval_stlc_premises pl l] evaluates each premise in the STLC premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_stlc_premises (pl:Ast.stlc_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | STLCPremise (c, b) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSTLCPremise (c) -> c end in\n          eval_stlc_premises t (l @ [prem]) in\n\n      (** [eval_stlc_rule_block srb] evaluates Ast.stlc_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_stlc_rule_block (srb:Ast.stlc_rule_block) : string =\n        match srb with\n        | STLCRuleBlock (b) -> eval_block b\n        | STLCRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | STLCLambda (c, srb) -> String.concat \"\" [eval_context c; \"\\\\vdash \"; eval_stlc_rule_block srb]\n      | STLCAxiom (c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n      | STLCTree (pl, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_stlc_premises pl []; \"\\n}\\n{\\n\"; eval_stlc (STLCLambda (c, srb)); \"\\n}\"]\n\n    (** [eval_context c] evaluates the Ast.context [c] to its corresponding LaTeX string *)\n    and eval_context (c:Ast.context) : string =\n\n      (** [eval_block_list bl l] evaluates the list of blocks represented by bl *)\n      let rec eval_block_list (bl:Ast.block list) (l:string list) =\n          match bl with\n          | [] -> l\n          | h :: t -> eval_block_list t (l @ [eval_block h]) in\n\n      match c with\n      | EmptyContext -> \"\\\\bm{\\\\cdot}\"\n      | Gamma -> \"\\\\Gamma\"\n      | GammaList (bl) -> String.concat \",\" (\"\\\\Gamma\"::(eval_block_list bl [])) in\n\n    (** [eval_sysf s] evaluates the System-F rule [s] to its corresponding string in LaTeX *)\n    let rec eval_sysf (s:Ast.sysf_rule) : string =\n\n      (** [eval_sysf_premises pl l] evaluates each premise in the System-F premise list [pl] and\n          appends this result to [l], then concatenates all the strings in this list *)\n      let rec eval_sysf_premises (pl:Ast.sysf_premise list) (l:string list) : string =\n        match pl with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t ->\n          let prem = begin match h with\n                           | SystemFPremise (tc, c, b) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_block b]\n                           | StrSystemFPremise (c) -> c end in\n          eval_sysf_premises t (l @ [prem]) in\n      \n      (** [eval_sysf_rule_block srb] evaluates Ast.sysf_rule_block [srb] to the corresponding string in LaTeX *)\n      let eval_sysf_rule_block (srb:Ast.sysf_rule_block) =\n        match srb with\n        | SystemFRuleBlock (b) -> eval_block b\n        | SystemFRuleLambda (l) -> eval_lambda l in\n\n      match s with\n      | SystemFLambda (tc, c, srb) -> String.concat \"\" [eval_type_context tc; \",\"; eval_context c; \"\\\\vdash \"; eval_sysf_rule_block srb]\n      | SystemFAxiom (tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n      | SystemFTree (pl, tc, c, srb, n) -> String.concat \"\" [\"\\\\inferrule*[Right=\"; n; \"]\"; \"\\n{\\n\"; eval_sysf_premises pl []; \"\\n}\\n{\\n\"; eval_sysf (SystemFLambda(tc, c, srb)); \"\\n}\"]\n\n    (** [eval_context tc] evaluates the Ast.type_context [tc] to its corresponding LaTeX string *)\n    and eval_type_context (tc:Ast.type_context) : string =\n\n      let rec eval_block_list_union (bl:Ast.block list) (l:string list) = \n        match bl with\n        | [] ->\n          let flower_bracket_adder (s:string) = String.concat \"\" [\"\\\\{\"; s; \"\\\\}\"] in\n          List.map flower_bracket_adder l\n        | h :: t -> eval_block_list_union t (l @ [eval_block h]) in\n\n      match tc with\n      | EmptyTypeContext -> \"\\\\bm{\\\\cdot}\"\n      | Delta -> \"\\\\Delta\"\n      | DeltaUnion (bl) -> String.concat \"\\\\cup \" (\"\\\\Delta\" :: (eval_block_list_union bl [])) in\n    \n    (** [eval_infer i] evaluates inference rule [i] to a string*)\n    let rec eval_infer (i:Ast.infer) : string =\n  \n      (** [eval_mapping m] evaluates Ast.mapping [m] to a string *)\n      let rec eval_mapping (m:Ast.mapping) : string =\n\n        (** [eval_maptype mt] evaluates Ast.maptype [mt] to a string *)\n        let eval_maptype (mt:Ast.maptype) : string =\n          match mt with\n          | SmallStep -> \"\\\\rightarrow\"\n          | BigStep -> \"\\\\Downarrow\"\n          | MultiStep -> \"\\\\rightarrow^*\"\n          | NotSmallStep -> \"\\\\nrightarrow\"\n          | NotBigStep -> \"\\\\not\\\\Downarrow\"\n          | NotMultiStep -> \"\\\\nrightarrow^*\" in\n  \n        (** [eval_mapping_half mh] evaluates Ast.mapping_half [mh] to a string*)\n        let eval_mapping_half (mh:Ast.mapping_half) : string =\n          match mh with\n          | Pair(d1, b1, b2, d2) -> String.concat \"\" [(eval_delim d1); \" \"; (eval_block b1); \",\"; (eval_block b2); (eval_delim d2)]\n          | MapStr(c) -> c in\n\n        match m with\n        | StoreMapping (mh1, mt, mh2) ->\n          String.concat \"\" [(eval_mapping_half mh1); (eval_maptype mt); \" \"; (eval_mapping_half mh2)]\n        | Hoare (c1, m, c2) -> String.concat \"\" [String.concat \"\" [\"\\\\{\"; c1; \"\\\\}\"]; (eval_mapping m); String.concat \"\" [\"\\\\{\"; c2; \"\\\\}\"]] in\n  \n      (** [eval_infer_list il l] evaluates Ast.infer list [il] to a list of evaluated inference rules *)\n      let rec eval_infer_list (il:Ast.infer list) (l:string list) : string =\n        match il with\n        | [] -> String.concat \"\\\\hspace{1.5cm}\" l\n        | h :: t -> eval_infer_list t (l @ [(eval_infer h)]) in\n\n      match i with\n      | Str (c) -> c\n      | Mapping (m) ->\n        let mapping = eval_mapping m in\n        mapping\n      | Axiom (m, c) ->\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\\\\hspace{1mm}\\n}\\n{\\n\"; mapping; \"\\n}\"]\n      | Rule (il, m, c) ->\n        let premises = eval_infer_list il [] in\n        let mapping = eval_mapping m in\n        String.concat \"\" [\"\\\\inferrule*[Right=\"; c; \"]\"; \"\\n{\\n\"; premises; \"\\n}\\n\"; \"{\\n\"; mapping; \"\\n}\"] in\n\n    (** [eval_split s] evaluates the split environment [s] to its corresponding string in LaTeX. *)\n    let rec eval_split (s:Ast.split) : string =\n      \n      (** [eval_math_eq me] evaluates the mathematical equation [me] to its corresponding string in LaTeX *)\n      let rec eval_math_eq (me:Ast.math_eq) : string =\n        \n        (** [eval_binop b] evaluates Ast.binop [b] to its corresponding LaTeX string representation *)\n        let eval_binop (b:Ast.binop) : string =\n          match b with\n          | Operation (o) ->\n            begin match o with\n                  | Plus -> \"+\"\n                  | Minus -> \"-\"\n                  | Mult -> \"\\\\times\"\n                  | Div -> \"/\"\n                  | And -> \"\\\\land\"\n                  | Or -> \"\\\\lor\"\n                  | _ -> failwith \"Exp and NCR handled externally\" end\n          | Relation (r) ->\n            begin match r with\n                  | Lt -> \"<\"\n                  | Nlt -> \"\\\\nless\"\n                  | Leq -> \"\\\\leq\"\n                  | Nleq -> \"\\\\nleq\"\n                  | Gt -> \">\"\n                  | Ngt -> \"\\\\ngtr\"\n                  | Geq -> \"\\\\geq\"\n                  | Ngeq -> \"\\\\ngeq\"\n                  | Subset -> \"\\\\subset\"\n                  | NSubset -> \"\\\\not\\\\subset\"\n                  | SubsetEq -> \"\\\\subseteq\"\n                  | NSubsetEq -> \"\\\\nsubseteq\"\n                  | ElementOf -> \"\\\\in\"\n                  | Eq -> \"=\"\n                  | Sim -> \"\\\\sim\"\n                  | Neq -> \"\\\\neq\"\n                  | Nsim -> \"\\\\nsim\"\n                  | Approx -> \"\\\\approx\" end in\n\n        match me with\n        | Int (i) -> i\n        | Var (v) -> v\n        | FactEq (u, m) -> String.concat \"\" [eval_math_eq m; \" !\"]\n        | NotEq (u, c) -> begin match c with | Var (v) -> String.concat \"\" [\"\\\\lnot \"; v] | _ -> failwith \"Unexpected Operand in Not Expression\" end\n        | Binop (m1, b, m2) ->\n          begin match b with\n                | Operation (Exp) -> String.concat \"\" [eval_math_eq m1; \" ^{\"; eval_math_eq m2; \"}\"]\n                | Operation (NCR) -> String.concat \"\" [\"{\"; eval_math_eq m1; \"\\\\choose \"; eval_math_eq m2; \"}\"]\n                | _ -> String.concat \" \" [eval_math_eq m1; eval_binop b; eval_math_eq m2] end\n        | Sum (m1, m2, m3) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3]\n        | ElSum (m1, m2) -> String.concat \"\" [\"\\\\sum_{\"; eval_math_eq m1; \"}\"; eval_math_eq m2]\n        | Integ (m1, m2, m3, m4) -> String.concat \"\" [\"\\\\int_{\"; eval_math_eq m1; \"}^{\"; eval_math_eq m2; \"} \"; eval_math_eq m3; \"\\\\,d \"; eval_math_eq m4]\n        | Deriv (m1, m2) -> String.concat \"\" [\"\\\\frac{d}{d \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | ParDeriv (m1, m2) -> String.concat \"\" [\"\\\\frac{\\\\partial}{\\\\partial \"; eval_math_eq m2; \"}\"; eval_math_eq m1]\n        | Frac (m1, m2) -> String.concat \"\" [\"\\\\frac{\"; eval_math_eq m1; \"}{\"; eval_math_eq m2; \"}\"] in\n\n      match s with\n      | MathEq (me) -> String.concat \"\" [\"&\"; eval_math_eq me]\n      | MathEqList (me, mel) -> String.concat \"\" [\"&\"; eval_math_eq me; \"\\\\\\\\\\n\"; eval_split mel] in\n\n    match se with\n    | Infer (i) -> \n      let infer = eval_infer i in\n      out @ [\"\\\\begin{mathpar}\"; infer; \"\\\\end{mathpar}\"]\n    | STLCRule (s) ->\n      let stlc = eval_stlc s in\n      out @ [\"\\\\begin{mathpar}\"; stlc; \"\\\\end{mathpar}\"]\n    | SystemFRule (s) ->\n      let sysf = eval_sysf s in\n      out @ [\"\\\\begin{mathpar}\"; sysf; \"\\\\end{mathpar}\"]\n    | Lambda (l) -> \n      let lam = eval_lambda l in\n      out @ [\"\\\\begin{equation*}\"; lam; \"\\\\end{equation*}\"]\n    | MathEquation (s) ->\n      let split_string = eval_split s in\n      out @ [\"\\\\begin{equation*}\\n\\\\begin{split}\"; split_string; \"\\\\end{split}\\n\\\\end{equation*}\"] in\n\n  match e with\n  | Equation (se) -> out @ (eval_simple_equation se [])\n  | EquationList (se, e) -> out @ (eval_simple_equation se []) @ (eval_equation e [])\n\n(** [eval_table t] evaluates the Ast.table [t] to its corresponding LaTeX string *)\nand eval_table (rl:Ast.row list) (s:string list) : string =\n  \n  (** [eval_row r] evaluates the Ast.row [r] to its corresponding LaTeX string *)\n  let eval_row (r:Ast.row) : string =\n    match r with\n    | Row (cl) -> String.concat \" & \" cl in\n\n  match rl with\n  | [] -> String.concat \" \\\\\\\\\\n\" s\n  | h :: t -> eval_table t (s @ [eval_row h])\n\n(** [eval ast out] evaluates the Ast.environment ast to a list of strings,\n    appends it to [out], and returns the result of this*)\nand eval (ast:Ast.environment) (out:string list) : string list =\n  \n  (** [construct_c_string t] is a helper function that constructs the number of columns used in the tabular LaTeX environment *)\n  let rec construct_c_string (t:Ast.row list) : string =\n    let i = begin match t with\n                  | [] -> failwith \"Empty List1\"\n                  | h :: t -> begin match h with Row (cl) -> List.length cl end end in\n    construct_c_string_helper i []\n\n  and construct_c_string_helper (i:int) (s:string list) =\n    if i = 0 then String.concat \" \" s\n    else construct_c_string_helper (i-1) (\"c\" :: s) in\n\n  match ast with\n  | Text (text) -> out @ (eval_text text)\n  | EquationEnv(e) -> out @ (eval_equation e [])\n  | Table (t) -> out @ [String.concat \"\" [\"\\\\begin{center}\\n\\\\begin{tabular}{\"; construct_c_string t; \"}\\n\"; eval_table t []; \"\\n\\\\end{tabular}\\n\\\\end{center}\"]]\n  | ListEnv (env, rem) -> out @ (eval env []) @ (eval rem [])\n  | _ -> failwith(\"Unimplemented\")"}]}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didSave","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml","version":43}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":266,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":149,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 266, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":267,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":147,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0128746032715ms
Sending response {"id": 267, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":268,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":147,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 268, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":269,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 269, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":270,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Sending response {"id": 270, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":271,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":34},"end":{"line":147,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 271, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":272,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 272, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":273,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 273, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":274,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":140,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00286102294922ms
Sending response {"id": 274, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":275,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":148,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 275, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":276,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":153,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 276, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":277,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":146,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 277, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":278,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":139,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 278, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":279,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 279, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":280,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Sending response {"id": 280, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":281,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":147,"character":34},"end":{"line":147,"character":34}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 281, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":282,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 282, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":283,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 283, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":284,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":145,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 284, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":285,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":145,"character":14},"end":{"line":145,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 285, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":286,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":138,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 286, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":287,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":122,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 287, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":288,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":113,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00381469726562ms
Sending response {"id": 288, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":289,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 289, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":290,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Sending response {"id": 290, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":291,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":145,"character":14},"end":{"line":145,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 291, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":292,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00715255737305ms
Sending response {"id": 292, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":293,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 293, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":294,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":112,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.0131130218506ms
Sending response {"id": 294, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":295,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":113,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 295, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":296,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":74,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 296, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":297,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":78,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 297, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":298,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":65,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 298, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":299,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":70,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 299, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":300,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":108,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 300, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":301,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":104,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 301, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":302,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":96,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 302, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":303,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":83,"character":12}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 303, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":304,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":106,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00309944152832ms
Sending response {"id": 304, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":305,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":106,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 305, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":306,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":104,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 306, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":307,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":103,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 307, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":308,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 308, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":309,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00476837158203ms
Sending response {"id": 309, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":310,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":145,"character":14},"end":{"line":145,"character":14}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 310, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":311,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 311, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":312,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 312, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":313,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":106,"character":50}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 313, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":314,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":108,"character":14}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 314, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":315,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":192,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 315, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":316,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":11,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 316, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":317,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 317, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":318,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 318, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":319,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":11,"character":7},"end":{"line":11,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 319, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":24},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharType of specialchar\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":320,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0159740447998ms
Sending response {"id": 320, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":321,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0159740447998ms
Sending response {"id": 321, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":322,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.014066696167ms
Sending response {"id": 322, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":323,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 323, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":324,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":11,"character":0},"end":{"line":11,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0171661376953ms
Sending response {"id": 324, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":325,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":69,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00286102294922ms
Sending response {"id": 325, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":326,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":69,"character":21}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 326, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":327,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":46,"character":18},"end":{"line":46,"character":23}},"context":{"diagnostics":[{"range":{"start":{"line":46,"character":18},"end":{"line":46,"character":23}},"message":"Unbound type constructor param","severity":1,"code":"","source":"merlin"}]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 327, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":328,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":47,"character":16},"end":{"line":47,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0109672546387ms
Sending response {"id": 328, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":329,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":10,"character":11},"end":{"line":10,"character":16}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.0209808349609ms
Sending response {"id": 329, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":330,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":10,"character":23}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00596046447754ms
Sending response {"id": 330, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":331,"method":"textDocument/definition","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":10,"character":23}}}
[server] Got a method textDocument/definition
[server] processing took 0.00691413879395ms
Sending response {"id": 331, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":332,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":10,"character":23},"end":{"line":10,"character":23}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 332, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml","version":25},"contentChanges":[{"text":"(* \n    This file describes the AST for a SimpleTeX file\n*)\n\n(* Parsing information: ((l1,c1),(l2,c2)) represents a symbol\n   appearing at line l1 character c1 to line l2 character c2. *)\ntype info = (int * int) * (int * int)\n\nexception SyntaxError\n\n(** Types [param] and [content] are used for text parameters and text *)\ntype param = string\ntype content = string\n\n(** Type [metadata] represents the various kinds of metadata in a LaTeX file *)\ntype metadata =\n  | Author of content\n  | Date of content\n  | Title of content\n  | MetadataList of metadata * metadata\n\n(** Type [pagestyle] represents the different page styles available *)\ntype pagestyle = \n  | Letter\n  | A4\n  | Legal\n\n(** Type [pageorient] represents different page orientations *)\ntype pageorient =\n  | Portrait\n  | Landscape\n\n(** Type [fontstyle] represents different font styles *)\ntype fontstyle =\n  | Times\n  | Default\n\n(** Type [linespacing] represents different amounts of line spacing *)\ntype linespacing =\n  | Single\n  | OnePointFive\n  | Double\n\n(** Type [setting] represents different kinds of settings that a user can change *)\ntype setting =\n  | PageStyle of pagestyle\n  | PageOrient of pageorient\n  | MarginSize of param\n  | FontSize of param\n  | FontStyle of fontstyle\n  | Spacing of linespacing\n  | ListSetting of setting * setting\n \n(** Type [text] represents text environments, either a text environment or multiple lines of text *)\ntype text =\n  | NormalText of content\n  | TextList of content * text\n\n(** Type [pageorient] represents the different kinds of inference rules *)\ntype infer =\n  | Str of content\n  | Mapping of mapping\n  | Axiom of mapping * content\n  | Rule of infer list * mapping * content\n\nand stlc_rule = \n  | STLCLambda of context * stlc_rule_block\n  | STLCAxiom of context * stlc_rule_block * content\n  | STLCTree of stlc_premise list * context * stlc_rule_block * content\n\nand stlc_rule_block =\n  | STLCRuleBlock of block\n  | STLCRuleLambda of lambda\n\nand stlc_premise =\n  | STLCPremise of context * block\n  | StrSTLCPremise of content\n\nand context =\n  | Gamma\n  | EmptyContext\n  | GammaList of block list\n\nand sysf_rule =\n  | SystemFLambda of type_context * context * sysf_rule_block\n  | SystemFAxiom of type_context * context * sysf_rule_block * content\n  | SystemFTree of sysf_premise list * type_context * context * sysf_rule_block * content\n\nand sysf_rule_block =\n  | SystemFRuleBlock of block\n  | SystemFRuleLambda of lambda\n\nand sysf_premise =\n  | SystemFPremise of type_context * context * block\n  | StrSystemFPremise of content\n\nand type_context =\n  | Delta\n  | EmptyTypeContext\n  | DeltaUnion of block list\n\n(** Type [mapping] represents the different kinds of mappings *)\nand mapping =\n  | StoreMapping of mapping_half * maptype * mapping_half\n  | Hoare of content * mapping * content\n\n(** Type [mapping_half] represents either pairs or strings,\n    and two mapping_halves make a mapping *)\nand mapping_half=\n  | Pair of delimiter * block * block * delimiter\n  | MapStr of content\n\n(** Type [delimiter] represents angle brackets used in inference rules *)\nand delimiter =\n  | Langle\n  | Rangle\n  | Sum\n  | Product\n  | Func\n\n(** Type [maptype] represents the different kinds of relations,\n    including small step, big step, and multistep *)\nand maptype =\n  | SmallStep\n  | BigStep\n  | MultiStep\n  | NotSmallStep\n  | NotBigStep\n  | NotMultiStep\n\n(** Type [specialchar] represents different special characters *)\nand specialchar =\n  | Sigma\n  | Lambda\n  | SigmaPrime\n  | SigmaDoublePrime\n  | BigLambda\n\n(** Type [block] represents either a spacial character or a string.\n    Two blocks make up a pair, enclosed with delimiters *)\nand block =\n  | SpecialChar of specialchar\n  | BlockStr of content\n  | TypedBlock of content * var_type\n\nand var_type =\n  | StrType of content\n  | SpecialCharType of specialchar\n  | Tau\n  | TauPrime\n  | TauZero\n  | TauOne\n  | TauTwo\n  | Universal of content * var_type\n  | FuncType of var_type * delimiter * var_type\n\nand lambda =\n  | LambdaType of lambda_args * block\n\nand lambda_args = \n  | LambdaArgs of specialchar * block * lambda_args option\n\n(** Type [split] a list of mathematical equations *)\ntype split =\n  | MathEq of math_eq\n  | MathEqList of math_eq * split\n\n(** Type [math_eq] represents the different kinds of mathematical equations\n    available. *)\nand math_eq = \n  | Int of content\n  | Var of content\n  | FactEq of unop * math_eq\n  | NotEq of unop * math_eq\n  | Binop of math_eq * binop * math_eq\n  | Sum of math_eq * math_eq * math_eq\n  | ElSum of math_eq * math_eq\n  | Integ of math_eq * math_eq * math_eq * math_eq\n  | Deriv of math_eq * math_eq\n  | ParDeriv of math_eq * math_eq\n  | Frac of math_eq * math_eq\n\n(** Type [unop] represents the different kinds of unary operations *)\nand unop =\n  | Fact\n  | Not\n\n(** Type [binop] represents the different kinds of binary operations and relations *)\nand binop = \n  | Operation of operation\n  | Relation of relation\n\n(** Type [operation] represents the different kinds of binary operations*)\nand operation =\n  | Plus\n  | Minus\n  | Mult\n  | Div\n  | Exp\n  | NCR\n  | And\n  | Or\n\n(** Type [relation] represents the different kinds of binary logical and set relations\n    between objects *)\nand relation =\n  | Lt\n  | Nlt\n  | Leq\n  | Nleq\n  | Gt\n  | Ngt\n  | Geq\n  | Ngeq\n  | Subset\n  | NSubset\n  | SubsetEq\n  | NSubsetEq\n  | ElementOf\n  | Eq\n  | Sim\n  | Neq\n  | Nsim\n  | Approx\n\n(** Type [simpleequation] represents a simple equation, which is a building block of a list of equations *)\ntype simpleequation = \n  | Infer of infer\n  | STLCRule of stlc_rule\n  | SystemFRule of sysf_rule\n  | Lambda of lambda\n  | MathEquation of split\n\n(** Type [equation] represents either a simple equation or a simple equation prepended onto a list of equations *)\ntype equation =\n  | Equation of simpleequation\n  | EquationList of simpleequation * equation\n\n(** Type [row] represents a row of a table *)\ntype row =\n  | Row of content list\n\n(** Type [environment] represents the various kinds of environements in the SimpleTeX language *)\ntype environment =\n  | Metadata of metadata\n  | Settings of setting\n  | Text of text\n  | EquationEnv of equation\n  | Table of row list\n  | ListEnv of environment * environment\n  | Nil"}]}}
Read message 
{"jsonrpc":"2.0","id":333,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":11,"character":7},"end":{"line":11,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 333, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":334,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 334, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":335,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 335, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":336,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 336, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":337,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":11,"character":7},"end":{"line":11,"character":7}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 337, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":338,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":32,"character":27}}}
[server] Got a method textDocument/hover
[server] processing took 0.00786781311035ms
Sending response {"id": 338, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":339,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":27,"character":40}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 339, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":340,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 340, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":341,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 341, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":342,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":53,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 342, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":343,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":83,"character":5}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 343, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":344,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":71,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.0770092010498ms
Sending response {"id": 344, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":345,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":96,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 345, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":346,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00715255737305ms
Sending response {"id": 346, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":347,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00286102294922ms
Sending response {"id": 347, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":348,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 348, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":349,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 349, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":350,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":102,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 350, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":351,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":70,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00476837158203ms
Sending response {"id": 351, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":352,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 352, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":353,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 353, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":354,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 354, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":355,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0169277191162ms
Sending response {"id": 355, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":356,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":59,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.00905990600586ms
Sending response {"id": 356, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":357,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 357, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":358,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 358, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":359,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":68,"character":43},"end":{"line":68,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 359, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":360,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":66,"character":26}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Sending response {"id": 360, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":361,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 361, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":362,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 362, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":363,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":68,"character":43},"end":{"line":68,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 363, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":364,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0150203704834ms
Sending response {"id": 364, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":365,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Sending response {"id": 365, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":366,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":38,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.0200271606445ms
Sending response {"id": 366, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":367,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 367, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":368,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00309944152832ms
Sending response {"id": 368, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":369,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":68,"character":43},"end":{"line":68,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00476837158203ms
Sending response {"id": 369, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":370,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 370, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":371,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 371, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":372,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":67,"character":20}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 372, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":373,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":66,"character":19}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 373, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":374,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00596046447754ms
Sending response {"id": 374, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":375,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 375, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":376,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":68,"character":43},"end":{"line":68,"character":43}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 376, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":377,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 377, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":378,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 378, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":379,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":38,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00715255737305ms
Sending response {"id": 379, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":380,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 380, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":381,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 381, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":382,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":70,"character":21},"end":{"line":70,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 382, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":383,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00810623168945ms
Sending response {"id": 383, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":384,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00405311584473ms
Sending response {"id": 384, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":385,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":70,"character":21},"end":{"line":70,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00309944152832ms
Sending response {"id": 385, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":386,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00381469726562ms
Sending response {"id": 386, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":387,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0100135803223ms
Sending response {"id": 387, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":388,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":65,"character":10}}}
[server] Got a method textDocument/hover
[server] processing took 0.00977516174316ms
Sending response {"id": 388, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":389,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":32,"character":18}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 389, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":390,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 390, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":391,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00500679016113ms
Sending response {"id": 391, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":392,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":70,"character":21},"end":{"line":70,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00405311584473ms
Sending response {"id": 392, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":393,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 393, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":394,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 394, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":395,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 395, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":396,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":78,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.0119209289551ms
Sending response {"id": 396, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":397,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 397, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":398,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":84,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 398, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":399,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":84,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 399, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":400,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":83,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 400, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":401,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":78,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 401, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":402,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":74,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 402, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":403,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":78,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00309944152832ms
Sending response {"id": 403, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":404,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":101,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 404, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":405,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":92,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 405, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":406,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":89,"character":11}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 406, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":407,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00905990600586ms
Sending response {"id": 407, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":408,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00691413879395ms
Sending response {"id": 408, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":409,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":70,"character":21},"end":{"line":70,"character":21}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 409, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":410,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00405311584473ms
Sending response {"id": 410, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":411,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 411, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":412,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":182,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 412, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":413,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":203,"character":8}}}
[server] Got a method textDocument/hover
[server] processing took 0.00500679016113ms
Sending response {"id": 413, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":414,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":182,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0121593475342ms
Sending response {"id": 414, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":415,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":183,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 415, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":416,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":182,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.0190734863281ms
Sending response {"id": 416, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":417,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":225,"character":39}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 417, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":418,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":225,"character":39}}}
[server] Got a method textDocument/documentHighlight
[server] processing took 0.00309944152832ms
Sending response {"id": 418, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":419,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00309944152832ms
Sending response {"id": 419, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":420,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 420, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":421,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":225,"character":39},"end":{"line":225,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00500679016113ms
Sending response {"id": 421, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":422,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":187,"character":45}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 422, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":423,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":169,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00381469726562ms
Sending response {"id": 423, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":424,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":140,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 424, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":425,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":170,"character":0}}}
[server] Got a method textDocument/hover
[server] processing took 0.00810623168945ms
Sending response {"id": 425, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":426,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":177,"character":2}}}
[server] Got a method textDocument/hover
[server] processing took 0.0109672546387ms
Sending response {"id": 426, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":427,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":179,"character":30}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 427, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":428,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":179,"character":6}}}
[server] Got a method textDocument/hover
[server] processing took 0.00619888305664ms
Sending response {"id": 428, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":429,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":187,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 429, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":430,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00381469726562ms
Sending response {"id": 430, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":431,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00619888305664ms
Sending response {"id": 431, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":432,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":225,"character":39},"end":{"line":225,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00691413879395ms
Sending response {"id": 432, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":433,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 433, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":434,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00596046447754ms
Sending response {"id": 434, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":435,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":182,"character":7}}}
[server] Got a method textDocument/hover
[server] processing took 0.00691413879395ms
Sending response {"id": 435, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":436,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":177,"character":2}}}
[server] Got a method textDocument/hover
[server] processing took 0.00405311584473ms
Sending response {"id": 436, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":437,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":178,"character":13}}}
[server] Got a method textDocument/hover
[server] processing took 0.0100135803223ms
Sending response {"id": 437, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":438,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00882148742676ms
Sending response {"id": 438, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":439,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00596046447754ms
Sending response {"id": 439, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":440,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"range":{"start":{"line":225,"character":39},"end":{"line":225,"character":39}},"context":{"diagnostics":[]}}}
[server] Got a method textDocument/codeAction
[server] processing took 0.00286102294922ms
Sending response {"id": 440, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":441,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00286102294922ms
Sending response {"id": 441, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":442,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00500679016113ms
Sending response {"id": 442, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":443,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"},"position":{"line":175,"character":3}}}
[server] Got a method textDocument/hover
[server] processing took 0.00596046447754ms
Sending response {"id": 443, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/ast.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/adith/Documents/CS-4110-Final-Project/eval.ml"}}}
Read message 
{"jsonrpc":"2.0","id":444,"method":"shutdown","params":null}
Sending response {"id": 444, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"exit","params":null}
Got exit! Terminating loop
Finished
